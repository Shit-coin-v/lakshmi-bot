import os
import hmac
import time
import hashlib, logging
from functools import wraps
from django.http import JsonResponse
from django.utils.deprecation import MiddlewareMixin

logger = logging.getLogger(__name__)

API_KEY = os.getenv("INTEGRATION_API_KEY", "")
HMAC_SECRET = os.getenv("INTEGRATION_HMAC_SECRET", "")
MAX_SKEW = int(os.getenv("HMAC_MAX_SKEW_SECONDS", "300"))

def _client_ip(request):
    xff = request.META.get("HTTP_X_FORWARDED_FOR")
    if xff:
        return xff.split(",")[0].strip()
    xri = request.META.get("HTTP_X_REAL_IP")
    if xri:
        return xri.strip()
    return request.META.get("REMOTE_ADDR", "")

def _bad(code, detail):
    return JsonResponse({"detail": detail}, status=code)

def _ip_allowed(request):
    try:
        allow = (os.getenv("ONEC_ALLOW_IPS") or "").split(",")
        allow = [a.strip() for a in allow if a.strip()]
        if not allow:
            return True
        real_ip = (request.META.get("HTTP_X_REAL_IP")
                   or request.META.get("REMOTE_ADDR") or "")
        return any(real_ip == a or real_ip.startswith(a.rstrip("*")) for a in allow)
    except Exception as e:
        logger.exception("ip check failed: %s", e)
        return False

def require_onec_auth(view_func):
    @wraps(view_func)
    def _wrapped(request, *args, **kwargs):
        try:
            if not API_KEY or not HMAC_SECRET:
                return _bad(401, "Server auth not configured")
            if not _ip_allowed(request):
                return _bad(403, "IP not allowed")

            api_key = request.META.get("HTTP_X_API_KEY")
            ts      = request.META.get("HTTP_X_TIMESTAMP")
            sign    = request.META.get("HTTP_X_SIGN")
            if not api_key or not ts or not sign:
                return _bad(401, "Missing auth headers")
            if api_key != API_KEY:
                return _bad(401, "Bad API key")

            try:
                ts_int = int(str(ts))
            except Exception:
                return _bad(401, "Bad timestamp")

            if abs(int(time.time()) - ts_int) > MAX_SKEW:
                return _bad(401, "Stale timestamp")

            body = request.body or b""
            msg  = f"{ts}.".encode("utf-8") + body
            try:
                expected = hmac.new(HMAC_SECRET.encode("utf-8"),
                                    msg, hashlib.sha256).hexdigest()
            except Exception as e:
                logger.exception("auth hmac calc failed: %s", e)
                return _bad(401, "Bad signature")

            if not hmac.compare_digest(expected, str(sign)):
                return _bad(401, "Bad signature")

            return view_func(request, *args, **kwargs)
        except Exception as e:
            logger.exception("require_onec_auth crashed: %s", e)
            return _bad(401, "Bad signature")
    return _wrapped
