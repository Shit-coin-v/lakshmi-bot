version: "3.9"

services:

  promtail:
    image: grafana/promtail:2.9.6
    container_name: promtail
    ports:
      - "127.0.0.1:9080:9080"
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - ./promtail-config.yaml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    privileged: true
    logging:
      driver: json-file
      options:
        max-size: "20m"
        max-file: "3"

  loki:
    image: grafana/loki:2.9.6
    container_name: loki
    ports:
      - "127.0.0.1:3100:3100"
    volumes:
      - ./loki-config.yaml:/etc/loki/local-config.yaml
    logging:
      driver: json-file
      options:
        max-size: "20m"
        max-file: "3"

  prometheus:
    image: prom/prometheus:v2.48.1
    container_name: prometheus
    ports:
      - "127.0.0.1:9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheusdata:/prometheus
    logging:
      driver: json-file
      options:
        max-size: "20m"
        max-file: "3"

  grafana:
    image: grafana/grafana:10.4.3
    container_name: grafana
    ports:
      - "127.0.0.1:3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_SERVER_SERVE_FROM_SUB_PATH: "true"
      GF_SERVER_ROOT_URL: "${PUBLIC_BASE_URL:-http://localhost:8000}/grafana/"
    volumes:
      - ./grafana/datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
      - grafanadata:/var/lib/grafana
    logging:
      driver: json-file
      options:
        max-size: "20m"
        max-file: "3"

  db:
    image: postgres:17
    env_file: .env
    restart: always
    container_name: db
    # ports:
    #   - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
      - db_backups:/var/lib/postgresql/backups
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U lakshmi -d lakshmi" ]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: json-file
      options:
        max-size: "20m"
        max-file: "3"

  app:
    build: .
    env_file: .env
    environment:
      PYTHONPATH: /app/backend
      DJANGO_SETTINGS_MODULE: backend.settings
    working_dir: /app
    depends_on:
      db:
        condition: service_healthy
    restart: always
    container_name: app
    volumes:
      - static:/app/backend/collected_static
      - media:/app/media
    healthcheck:
      test: [ "CMD-SHELL", "curl -fsS http://127.0.0.1:8000/healthz/ || exit 1" ]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 20s
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "5"

  celery_worker:
    build: .
    env_file: .env
    container_name: celery_worker
    restart: always
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
      POSTGRES_HOST: db
      PYTHONPATH: /app/backend
      DJANGO_SETTINGS_MODULE: backend.settings
    entrypoint: ["celery"]
    command: ["-A", "backend.celery", "worker", "--loglevel=info"]
    logging:
      driver: json-file
      options:
        max-size: "20m"
        max-file: "3"

  celery_beat:
    build: .
    env_file: .env
    container_name: celery_beat
    restart: always
    depends_on:
      db:
        condition: service_healthy
      celery_worker:
        condition: service_started
      redis:
        condition: service_healthy
    environment:
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
      POSTGRES_HOST: db
      PYTHONPATH: /app/backend
      DJANGO_SETTINGS_MODULE: backend.settings
    entrypoint: ["celery"]
    command: ["-A", "backend.celery", "beat", "--loglevel=info"]
    logging:
      driver: json-file
      options:
        max-size: "20m"
        max-file: "3"

  redis:
    image: redis:7
    container_name: redis
    ports:
      - "127.0.0.1:6379:6379"
    restart: always
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  nginx:
    build: ./nginx/
    depends_on:
      - db
      - app
    restart: always
    ports:
      - "127.0.0.1:8000:80"
    environment:
      SERVER_NAME: ${SERVER_NAME:-_}
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/templates/default.conf.template:ro
      - static:/app/backend/collected_static
      - media:/app/media
    logging:
      driver: json-file
      options:
        max-size: "20m"
        max-file: "5"

  metabase:
    image: metabase/metabase:v0.49.14
    container_name: metabase
    restart: unless-stopped
    environment:
      MB_DB_FILE: /metabase-data/metabase.db
      MB_JETTY_HOST: 0.0.0.0
      MB_JETTY_PORT: 3000
      MB_SITE_URL: ${PUBLIC_BASE_URL:-http://localhost:8000}/metabase/
    volumes:
      - metabase-data:/metabase-data
    depends_on:
      - db
    ports:
      - "127.0.0.1:3001:3000"
    logging:
      driver: json-file
      options:
        max-size: "20m"
        max-file: "3"

volumes:
  static:
  media:
  pg_data:
  db_backups:
  grafanadata:
  prometheusdata:
  metabase-data:

