services:

  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    ports:
      - "9080:9080"
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - ./promtail-config.yaml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    privileged: true

  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      - ./loki-config.yaml:/etc/loki/local-config.yaml

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheusdata:/prometheus

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./grafana/datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
      - grafanadata:/var/lib/grafana

  db:
    image: postgres:17
    env_file: .env
    restart: always
    container_name: db
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
      - db_backups:/var/lib/postgresql/backups
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U lakshmi -d lakshmi" ]
      interval: 10s
      timeout: 5s
      retries: 5

  app:
    build: .
    env_file: .env
    depends_on:
      - db
    restart: always
    container_name: app
    volumes:
      - static:/app/backend/collected_static
      - media:/app/media

  celery_worker:
    build: .
    env_file: .env
    container_name: celery_worker
    restart: always
    depends_on:
      - app
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - POSTGRES_HOST=db
    command: celery -A backend.backend worker --loglevel=info


  celery_beat:
    build: .
    env_file: .env
    container_name: celery_beat
    restart: always
    depends_on:
      - celery_worker
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    command: celery -A backend.backend beat --loglevel=info


  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"
    restart: always
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5


  nginx:
    build: ./nginx/
    depends_on:
      - db
      - app
    restart: always
    ports:
      - "8000:80"
    volumes:
      - static:/app/backend/collected_static
      - media:/app/media


volumes:
  static:
  media:
  pg_data:
  db_backups:
  grafanadata:
  prometheusdata:
